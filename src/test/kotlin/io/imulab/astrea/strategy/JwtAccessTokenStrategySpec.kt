package io.imulab.astrea.strategy

import io.imulab.astrea.domain.request.OAuthRequest
import io.imulab.astrea.error.InvalidGrantException
import io.imulab.astrea.support.TokenSupport
import org.assertj.core.api.Assertions.*
import org.mockito.Mockito.mock
import org.spekframework.spek2.Spek
import org.spekframework.spek2.style.specification.describe
import java.time.LocalDateTime

object JwtAccessTokenStrategySpec : Spek({

    val strategy = TokenSupport.AccessToken.defaultStrategy

    describe("fromRaw") {
        it("""
            generated raw token should be converted to domain properly
        """.trimIndent()) {
            val raw = TokenSupport.AccessToken.new().token
            val parsed = strategy.fromRaw(raw)
            assertThat(parsed.token).isEqualTo(raw)
        }
    }

    describe("verify") {

        describe("should succeed") {
            it("""
                when it was generated by the same strategy
            """.trimIndent()) {
                val raw = TokenSupport.AccessToken.new().token

                assertThatCode {
                    strategy.validateAccessToken(mock(OAuthRequest::class.java), raw)
                }.doesNotThrowAnyException()
            }
        }

        describe("should fail") {
            it("""
                when it has expired
            """.trimIndent()) {
                val raw = TokenSupport.AccessToken.new(expiry = LocalDateTime.now().minusHours(1)).token
                assertThatExceptionOfType(InvalidGrantException.Expired::class.java)
                        .isThrownBy { strategy.validateAccessToken(mock(OAuthRequest::class.java), raw) }
            }

            it("""
                when it is bad formatted
            """.trimIndent()) {
                assertThatExceptionOfType(InvalidGrantException.BadFormat::class.java)
                        .isThrownBy { strategy.validateAccessToken(mock(OAuthRequest::class.java), "bad-token") }
            }
        }
    }
})